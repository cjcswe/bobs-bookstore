name: Build and Deploy .NET Application

on:
  push:
    branches:
      - 'main'
  workflow_dispatch: # Allow manual triggering

env:
  AWS_REGION: 'us-west-1'
  BUCKET_NAME: '' # Override Creation
  ARTIFACT_NAME: 'Bookstore.Web'

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ steps.deploy_stack.outputs.bucket_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy Bootstrap CFN Stack and Set Artifacts S3 Bucket Name
        id: deploy_stack
        run: |
          BUCKET_NAME="${{ env.BUCKET_NAME }}"
          if [ -z "$BUCKET_NAME" ]; then
            REPOSITORY_NAME="$(echo '${{ github.repository }}' | tr '/' '-')"
            BUCKET_NAME="$REPOSITORY_NAME-pipeline-bucket"
            STACK_NAME="$REPOSITORY_NAME-pipeline-bootstrap-stack"
            aws cloudformation deploy \
              --template-file atx-pipeline/infrastructure/bootstrap.yaml \
              --stack-name $STACK_NAME \
              --parameter-overrides PipelineBucketName=$BUCKET_NAME
          fi
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT

  build:
    needs: bootstrap
    runs-on: ubuntu-latest
    outputs:
      artifact_path: ${{ steps.upload_artifacts.outputs.artifact_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./app/Bookstore.Web/Bookstore.Web.csproj

      - name: Build project
        run: dotnet build ./app/Bookstore.Web/Bookstore.Web.csproj --configuration Release --no-restore

      - name: Publish for Linux
        run: |
          dotnet publish ./app/Bookstore.Web/Bookstore.Web.csproj \
            --configuration Release \
            --output ${{ github.workspace }}/publish \
            --no-build

      - name: Compress artifacts
        run: cd ${{ github.workspace }}/publish && zip -r ../${{ env.ARTIFACT_NAME }}.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload Artifacts to Pipeline Bucket
        id: upload_artifacts
        run: |
          ARTIFACT_PATH="${{ github.run_id }}-${{ env.ARTIFACT_NAME }}.zip"
          aws s3 cp "${{ github.workspace }}/${{ env.ARTIFACT_NAME }}.zip" "s3://${{ needs.bootstrap.outputs.bucket_name }}/$ARTIFACT_PATH"
          echo "artifact_path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ${{ matrix.region }}
    needs: [bootstrap, build]
    runs-on: ubuntu-latest

    strategy: # Support multiple deployment environments
      matrix:
        include:
          - region: 'us-west-1'
            instance_id: 'i-0ecac04f5ddbc3bf7' # Override Creation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Deploy Application Infrastructure
        run: |
          INSTANCE_ID="${{ matrix.instance_id }}"
          if [ -z "$INSTANCE_ID" ]; then
            echo "Deploying Application Infrastructure..."
            STACK_NAME="$(echo '${{ github.repository }}' | tr '/' '-')-${{ matrix.region }}"
            aws cloudformation deploy \
              --template-file atx-pipeline/infra/application.yaml \
              --stack-name $STACK_NAME \
              --parameter-overrides ArtifactS3Bucket=${{ needs.bootstrap.outputs.bucket_name }} \
              --capabilities CAPABILITY_NAMED_IAM
            echo "Deployed Stack: $STACK_NAME"
            INSTANCE_ID=$(aws cloudformation describe-stacks \ 
              --stack-name $STACK_NAME \
              --query "Stacks[0].Outputs[?OutputKey=='EC2InstanceId'].OutputValue" \
              --output text)
          fi
          echo "Target EC2 InstanceId: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Deploy Application
        run: |
          INSTANCE_ID="${{ env.INSTANCE_ID }}"

          COMMANDS="["
          while IFS= read -r line; do 
            # Escape quotes and backslashes in the command
            escaped_line=$(printf '%s' "$line" | sed 's/\\/\\\\/g; s/"/\\"/g')
            COMMANDS+="\"${escaped_line%$'\r'}\","
          done < atx-pipeline/scripts/startup.sh
          COMMANDS="${COMMANDS%,}]"

          echo "Sending application startup commands to target. InstanceId: $INSTANCE_ID..."
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --comment "Download and start application" \
            --parameters '{
              "commands": '"$COMMANDS"',
              "environmentVariables": [{
                "S3_URI": "s3://${{ needs.bootstrap.outputs.bucket_name }}/${{ needs.build.outputs.artifact_path }}"
              }]
            }' \
            --query "Command.CommandId" \
            --output text)

          echo "Waiting for command to finish. CommandId: $COMMAND_ID"
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID &> /dev/null || true

          echo "Command finished. Output:"
          aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --query "{
                STATUS: Status,
                STDOUT: StandardOutputContent,
                STDERR: StandardErrorContent
              }" \
              --output table

          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id $INSTANCE_ID \
            --query "Status" \
            --output text)

          if [ "$STATUS" != "Success" ]; then
            echo "Application startup failed"
            exit 1
          fi;
          echo "Application startup succeeded!"

      - name: Execute Integration Tests
        run: |
          echo "Integration test placeholder. Please implement and restart workflow."

  # Add additional deployment jobs for different stages