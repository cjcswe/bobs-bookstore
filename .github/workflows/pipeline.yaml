name: Build and Deploy .NET Application

on:
  push:
    branches:
      - 'main'
  schedule: # Weekly at 00:00 UTC on Monday
    - cron: '0 0 * * 1' 
  workflow_dispatch: # Allow manual triggering 

env:
  AWS_REGION: 'us-west-1'
  BUCKET_NAME: ''
  ARTIFACT_NAME: 'Bookstore.Web'

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    outputs:
      BUCKET_NAME: ${{ steps.deploy_stack.outputs.BUCKET_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy Bootstrap CFN Stack # Create Artifacts S3 Bucket
        id: deploy_stack
        run: |
          BUCKET_NAME="${{ env.BUCKET_NAME }}"
          if [ -z "$BUCKET_NAME" ]; then
            REPOSITORY_NAME="$(echo '${{ github.repository }}' | tr '/' '-')"
            BUCKET_NAME="$REPOSITORY_NAME-pipeline-bucket"
            STACK_NAME="$REPOSITORY_NAME-pipeline-bootstrap-stack"
            aws cloudformation deploy \
              --template-file pipeline/infrastructure/bootstrap.yaml \
              --stack-name $STACK_NAME \
              --parameter-overrides PipelineBucketName=$BUCKET_NAME
          fi
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_OUTPUT

  build:
    needs: bootstrap # Pipeline Bucket must exist
    runs-on: ubuntu-latest
    outputs:
      ARTIFACT_PATH: ${{ steps.upload_artifacts.outputs.ARTIFACT_PATH }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./app/Bookstore.Web/Bookstore.Web.csproj

      - name: Build project
        run: dotnet build ./app/Bookstore.Web/Bookstore.Web.csproj --configuration Release --no-restore

      - name: Publish for Linux
        run: |
          dotnet publish ./app/Bookstore.Web/Bookstore.Web.csproj \
            --configuration Release \
            --output ${{ github.workspace }}/publish \
            --no-build

      - name: Compress artifacts
        run: cd ${{ github.workspace }}/publish && zip -r ../${{ env.ARTIFACT_NAME }}.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload Artifacts to Pipeline Bucket
        id: upload_artifacts
        run: |
          ARTIFACT_PATH="${{ github.sha }}-${{ env.ARTIFACT_NAME }}.zip"
          aws s3 cp "${{ github.workspace }}/${{ env.ARTIFACT_NAME }}.zip" "s3://${{ needs.bootstrap.outputs.bucket_name }}/$ARTIFACT_PATH"
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ${{ matrix.region }}
    needs: build # Application Artifacts must be uploaded
    runs-on: ubuntu-latest

    strategy: # Support multiple deployment environments
      matrix:
        include:
          - region: 'us-west-1'
          # Add more regions as necessary

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Deploy Application Infrastructure
        run: |
          STACK_NAME="$(echo '${{ github.repository }}' | tr '/' '-')-${{ matrix.region }}"
          aws cloudformation deploy \
            --template-file pipeline/infra/application.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides ArtifactS3Bucket=${{ needs.bootstrap.outputs.BUCKET_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV

      - name: Deploy Application
        run: | 
          INSTANCE_ID=$(aws cloudformation describe-stacks \ 
            --stack-name "${{ env.STACK_NAME }}-${{ matrix.region }}" \
            --query "Stacks[0].Outputs[?OutputKey=='EC2InstanceId'].OutputValue" \
            --output text)
            
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --comment "Download and start application" \
            --parameters "{
              \"commands\": "echo 'hello';",
              \"artifactUri\": [\"s3://${{ needs.bootstrap.outputs.BUCKET_NAME }}/${{ needs.build.outputs.ARTIFACT_PATH }}\"]
            }" \
            --query "Command.CommandId" \ 
            --output text)
            
          aws ssm wait command-executed \ 
            --command-id "$COMMAND_ID" \ 
            --instance-id "$INSTANCE_ID" 
            
          if [ $? -ne 0 ]; then
            aws ssm get-command-invocation \ 
              --command-id "$COMMAND_ID" \ 
              --instance-id "$INSTANCE_ID" \ 
              --query "StandardErrorContent" \ 
              --output text
            exit 1
          fi;

      - name: Execute Integration Tests
        run: |
          echo "Integration tests are blank. Please create them and restart workflow."

  # Add additional deployment jobs for different stages